errorbar = "SD",
showeffect = TRUE,
div = 1.3,
y_max = 120)
split_activity <- lapply(c("Flights of stairs climbed", "Walking and running distance", "Steps taken", "Sleep quality"), function(n){
filter(perform, activity == n) %>%
repli_plot(.,
xColname = "Time (units)",
xValue = c("Jan–Apr 2015", "May–Aug 2015", "Sep–Dec 2015", "Jan–Apr 2016", "May–Aug 2016", "Sep–Dec 2016"),
ctrl_index = 1,
yColname = "% performance",
f_pt = "TRUE",
fColname = "activity",
fValue = c("Flights of stairs climbed", "Walking and running distance", "Steps taken", "Sleep quality"),
title_txt = "An individual's performance normalized by the respective maxima within the two years",
y_lab = yColname,
x_lab = xColname,
withDots = TRUE,
errorbar = "SD",
showeffect = TRUE,
div = 1.7,
y_max = 120)
})
do.call(grid.arrange, split_activity)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth")
x <- lapply(x, require, character.only = TRUE)
source("./static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("./static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
test <- FFF_sleuth_fit(test, ~condition, 'full')
test <- RRR_sleuth_fit(test, ~1, 'reduced')
test <- LLL_sleuth_lrt(test, 'reduced', 'full')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
setwd()
getwd()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth")
x <- lapply(x, require, character.only = TRUE)
source("./static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("./static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth")
x <- lapply(x, require, character.only = TRUE)
source("./static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("./static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
test <- FFF_sleuth_fit(test, ~condition, 'full')
test <- RRR_sleuth_fit(test, ~1, 'reduced')
test <- LLL_sleuth_lrt(test, 'reduced', 'full')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
perform <- read_csv("/Users/Guoshiyuan/Dropbox/GuoSY_blog/static/bar_plot/Scatter_plot.csv")
colnames(perform) <- c(colnames(perform)[1],
paste0(colnames(perform)[2], "_", 1:4),
paste0(colnames(perform)[6], "_", 1:4),
paste0(colnames(perform)[10], "_", 1:4),
paste0(colnames(perform)[14],"_", 1:4))
perform <- gather(perform, activity, `% performance`, -`Time (units)`) %>%
separate(activity, c("activity", "replicate"), "_") %>%
mutate_at(.vars = vars(`% performance`),
.funs = funs(as.numeric(gsub("%", "", .)))) %>%
mutate_at(.vars = vars(activity),
.funs = funs(factor(.))) %>%
mutate_at(.vars = vars(replicate),
.funs = funs(as.numeric(.)))
css <- "tbody tr:nth-child(odd){
background-color: #4C8BF5;
color: #fff;
} "
head(perform) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(height = "200px", extra_css = css)
x <- c("tidyverse", "ggsignif", "gridExtra", "kableExtra")
x <- sapply(x, require, character.only = TRUE)
tibble::tribble(
~`type of variable`, ~`name and meaning of variable`,
"continuous response", "y = % performance (ranging from 0 to 100)",
"categorical explainatory", "x = time (6 categories, every 4 months within two years",
"categorical explainatory", "f = type of reading (3 exercises + 1 sleeping pattern)"
) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
perform <- read_csv("/Users/Guoshiyuan/Dropbox/GuoSY_blog/static/bar_plot/Scatter_plot.csv")
colnames(perform) <- c(colnames(perform)[1],
paste0(colnames(perform)[2], "_", 1:4),
paste0(colnames(perform)[6], "_", 1:4),
paste0(colnames(perform)[10], "_", 1:4),
paste0(colnames(perform)[14],"_", 1:4))
perform <- gather(perform, activity, `% performance`, -`Time (units)`) %>%
separate(activity, c("activity", "replicate"), "_") %>%
mutate_at(.vars = vars(`% performance`),
.funs = funs(as.numeric(gsub("%", "", .)))) %>%
mutate_at(.vars = vars(activity),
.funs = funs(factor(.))) %>%
mutate_at(.vars = vars(replicate),
.funs = funs(as.numeric(.)))
css <- "tbody tr:nth-child(odd){
background-color: #4C8BF5;
color: #fff;
} "
head(perform) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(height = "200px", extra_css = css)
tibble::tribble(
~`arguement names`, ~`meaning`,
"df", "the dataframe with every datapoint",
"xColname, xValue", "the column name of explanatory variable and levels, which determins the order of levels",
"ctrl_index", "the index of levels which is regarded as control to obtain effect size. default as first levels",
"yColname", "the column name of response variable ",
"f_pt", "how to deal with another factor? FALSE = no the other factor; TRUE = have the other factor by create a seperate graph; dodge = using geom_bar(position = dodge) (developing, due to hard to automate significant bar.)",
"fColname, and fValue", "the other factors",
"title_txt, y_lab, x_lab","labels",
"withDots", "with each individual replicate should be shown as points?",
"errorbar", "what is the error bar represent? least significant difference (LSD) bars will be inplemented.",
"showeffect", "whether effect size should be shown, given ANOVA significance.",
"div", "a common text divider ",
"y_max", "y_max should ~20% higher that maximun y to make space for significant bar"
) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
repli_plot <- function(df,
xColname, xValue, ctrl_index = 1, # x grouping
yColname, # y/resposne
f_pt = c(FALSE, TRUE, "dodge"), # timepoint options
fColname, fValue, # the other factor value
title_txt, y_lab = yColname, x_lab = xColname, #labs
withDots = TRUE, errorbar = c("SEM", "SD", "95%CI"), showeffect = TRUE, # utils
div = 1, y_max = 120){
## assigning internal variable y, x and time.
df$y <- df[[which(colnames(df) == yColname)]]
df$x <- factor(df[[which(colnames(df) == xColname)]], levels = xValue)
if(f_pt ==  "TRUE" || f_pt == "dodge") {
df$f  <- factor(df[which(colnames(df) == fColname)], levels = fValue)
}
if (ctrl_index %in% seq_along(xValue) == FALSE){stop("ctrl index out of bound!")}
##anova test and tukey comparing significance
ano <- summary(aov(y~x, data = df))[[1]][["Pr(>F)"]][1]
post_hoc_pairs <- unlist(sapply(xValue[1:(length(xValue)-1)], function(first){
lapply(xValue[(which(xValue == first)+1):length(xValue)], function(second){
c(first,second)
})
}), recursive = FALSE)
sign <- TukeyHSD(aov(y~x, df))$x[,4]
## compares only the significant groups
sign <- sign[which(sign < 0.05)]
post_hoc_pairs <- post_hoc_pairs[which(sign < 0.05)]
sign_ano <- ifelse(unname(sign)<0.0001,"****",
ifelse(unname(sign)<0.001, "***",
ifelse(unname(sign)<0.01, "**",
ifelse(unname(sign)<0.05, "*", "ns"))))
## various label
y_lab <- paste0(y_lab, "\n Error bar represents ", errorbar)
if (f_pt == "FALSE" || f_pt == "dodge") {
title <- title_txt
} else if (f_pt == "TRUE") {
title <- fValue
}
## summarising by group
df_sum <- group_by(df, x) %>%
summarise(ybar = mean(y, na.rm = TRUE),
se = sd(y, na.rm = TRUE)/sqrt(length((y))),
sd = sd(y, na.rm = TRUE),
n = n(),
confint_l = ybar - qt(1 - (0.05 / 2), n-1)*se, # CI assumes a t-distribution.
confint_h = ybar + qt(1 - (0.05 / 2), n-1)*se) %>%
mutate(ctrl = rep.int(ybar[which(x == xValue[ctrl_index])], nrow(.)),
effect = signif((ybar-ctrl)/ctrl*100, digits = 3)) %>%
mutate_at(.vars = vars(effect),
.funs = funs(ifelse(. == 0, "nc",ifelse(.<0,
paste0("\u2193", abs(.), "%"),
paste0("\u2191", abs(.), "%")))))
## plotting
p <- ggplot(data = df_sum, aes(x = x, y = ybar)) +
geom_col(fill = "#A0A0A0",  width = 0.4) + # using geom_col instead of geom_bar
theme(axis.line = element_line(size=1, color = "black"),
axis.ticks.x = element_blank(),
aspect.ratio =1.6/(1+sqrt(5)),
panel.background = element_blank()) +
theme(plot.title = element_text(size = 25/div, hjust = 0.5),
plot.subtitle = element_text(size= 20, hjust = 0, face="italic", color="grey60"),
axis.title.y = element_text(size = 15/div),
axis.title.x = element_text(size = 10/div),
axis.text.y = element_text(size= 15/div, color = "black"),
axis.text.x = element_text(size= 15/div, color = "black"),
legend.text = element_text(size= 15/div, color = "black"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
## with dots
if (withDots){
p <- p + geom_point(data = df, aes(x = x, y = y), size = .5, shape=1)
}
## type of error bar
if (errorbar == "SEM"){
p <- p + geom_errorbar(aes(ymin = ybar-se, ymax = ybar + se), width = 0.2)
} else if (errorbar == "SD"){
p <- p + geom_errorbar(aes(ymin = ybar-sd, ymax = ybar + sd), width = 0.2)
} else if (errorbar == "95%CI"){
p <- p + geom_errorbar(aes(ymin = confint_l, ymax = confint_h), width = 0.2)
} else {stop("error bar can only represent sem, se, of 95%CI.")}
## show effect size
if (showeffect && ano < 0.05){
p <- p + geom_text(data = subset(df_sum, x != x[which(grepl(xValue[ctrl_index], xValue, fixed=TRUE))]), aes(x = x, y = ybar/2, label = effect), size = 8/div, fontface = "bold")
}
## anova labelling
if (ano < 0.001){
ano_txt <- "P value from anova < 0.001"
} else if (ano >= 0.001){
ano_txt <- signif(ano, digits = 3) %>% paste0("P value from anova = ", .)
}
p <- p + labs(title = title_txt, subtitle = ano_txt, y = y_lab, x = x_lab)
## post hoc labelling
if (ano < 0.05){
y_pos <- seq(0.8, 0.93, length.out = length(post_hoc_pairs))*y_max # significant bars' y position
p <- p + ggsignif::geom_signif(comparisons = post_hoc_pairs,
y_position = y_pos,
annotations = sign_ano,
tip_length = rep.int(.02, length(post_hoc_pairs)*2), # double the length
textsize = 8/div)
}
p
}
repli_plot(df = perform,
xColname = "Time (units)",
xValue = c("Jan–Apr 2015", "May–Aug 2015", "Sep–Dec 2015", "Jan–Apr 2016", "May–Aug 2016", "Sep–Dec 2016"),
ctrl_index = 1,
yColname = "% performance",
f_pt = "FALSE",
title_txt = "An individual's performance normalized by the respective maxima within the two years",
y_lab = yColname,
x_lab = xColname,
withDots = TRUE,
errorbar = "SD",
showeffect = TRUE,
div = 1.3,
y_max = 120)
perform
blogdown:::serve_site()
blogdown:::serve_site()
tibble::tribble(
~`type of variable`, ~`name and meaning of variable`,
"continuous response", "y = % performance (ranging from 0 to 100)",
"categorical explainatory", "x = time (6 categories, every 4 months within two years",
"categorical explainatory", "f = type of reading (3 exercises + 1 sleeping pattern)"
)
tibble::tribble(
~`type of variable`, ~`name and meaning of variable`,
"continuous response", "y = % performance (ranging from 0 to 100)",
"categorical explainatory", "x = time (6 categories, every 4 months within two years",
"categorical explainatory", "f = type of reading (3 exercises + 1 sleeping pattern)"
)
tibble::tribble(
~`type of variable`, ~`name and meaning of variable`,
"continuous response", "y = % performance (ranging from 0 to 100)",
"categorical explainatory", "x = time (6 categories, every 4 months within two years",
"categorical explainatory", "f = type of reading (3 exercises + 1 sleeping pattern)"
) %>%
kable(format = html) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
blogdown:::serve_site()
?geom_signif
72*5.5
72*5.5
help(par)
?theme
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=.5) +
geom_signif(y_position=c(5.3, 8.3), xmin=c(0.8, 1.8), xmax=c(1.2, 2.2),
annotation=c("**", "NS"), tip_length=0) +
geom_signif(comparisons=list(c("S1", "S2")),
y_position = 9.3, tip_length = 0, vjust=0.2) +
scale_fill_manual(values = c("grey80", "grey20"))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=.5) +
geom_signif(y_position=c(5.3, 8.3), xmin=c(0.8, 1.8), xmax=c(1.2, 2.2),
annotation=c("**", "NS"), tip_length=0) +
geom_signif(comparisons=list(c("S1", "S2")),
y_position = 9.3, tip_length = 0, vjust=0.2) +
scale_fill_manual(values = c("grey80", "grey20"))
dat
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width)
y_max = 10
bar_width = 0.4
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width)
c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width)
bar_width = 0.4/2
bar_width = 0.4/2
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/2
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width*2) +
geom_signif(data = annotation_df,
aes(xmin=start, xmax=end, annotations=label, y_position=y),
textsize = 3, vjust = -0.2,
manual=TRUE) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/2
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width*2) +
geom_signif(data = annotation_df,
aes(xmin=start, xmax=end, annotations=label, y_position=y),
textsize = 3, vjust = -0.2,
manual=TRUE) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/2
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width*2) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2,
manual=TRUE) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
x <- c("tidyverse", "ggsignif", "gridExtra", "knitr", "kableExtra")
x <- sapply(x, require, character.only = TRUE)
tibble::tribble(
~`type of variable`, ~`name and meaning of variable`,
"continuous response", "y = % performance (ranging from 0 to 100)",
"categorical explainatory", "x = time (6 categories, every 4 months within two years",
"categorical explainatory", "f = type of reading (3 exercises + 1 sleeping pattern)"
) %>%
kable(format = "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), font_size = 10)
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/2
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width*2) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2,
manual=TRUE) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/2
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width*2) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
X11()
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/2
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=(bar_width*2)) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/4
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=(bar_width*2)) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/4
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=(bar_width*4)) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
blogdown:::serve_site()
getwd()
getwd()
setwd(paste0(getwd(), "/content/package"))
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth")
x <- lapply(x, require, character.only = TRUE)
source("../../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
test <- FFF_sleuth_fit(test, ~condition, 'full')
