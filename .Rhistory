x
x <- matrix(c(0,1,3,1), ncol = 2, dimnames = list(Sex = c("F", "M"), Color = c("blue", "brown")))
x
str(x)
ctable
str(ctable)
str(as.table(x))
x <- as.data.frame(matrix(c(0L,1L,3L,1L), ncol = 2, dimnames = list(Sex = c("F", "M"), Color = c("blue", "brown"))))
str(x)
x <- as.table(matrix(c(0L,1L,3L,1L), ncol = 2, dimnames = list(Sex = c("F", "M"), Color = c("blue", "brown"))))
str(x)
ctable
str(ctable)
identical(x, ctable)
x
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "F"), HS6ST2_expression = c("Positive", "Negative"))))
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "F"), HS6ST2_expression = c("Positive", "Negative"))))
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "F"), HS6ST2_expression = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "F"), HS6ST2_expression = c("Positive", "Negative")))) %>%
as.data.frame(.)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), HS6ST2_expression = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), HS6ST2_expression = c("Positive", "Negative"))))
as.table(matrix(c(40L, 38L, 14L, 18L), ncol = 2, dimnames = list( `Age, years`= c(">=60", "<60"), HS6ST2_expression = c("Positive", "Negative"))))
as.table(matrix(c(20L, 28L, 30L, 6L, 10L, 16L), ncol = 2, dimnames = list(`Tumor location` = c("Fundus", "Body", "Antrum"), HS6ST2_expression = c("Positive", "Negative"))))
as.table(matrix(c(20L, 28L, 30L, 6L, 10L, 16L), ncol = 2, dimnames = list(`Tumor location` = c("Fundus", "Body", "Antrum"), HS6ST2_expression = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
as.table(matrix(c(7L, 13L, 36L,22L, 6L, 9L, 15L, 2L), ncol = 2, dimnames = list(`TNM stage` = c("I", "II", "III","IV"), `HS6ST2 expression` = c("Positive", "Negative"))))
as.table(matrix(c(7L, 13L, 36L,22L, 6L, 9L, 15L, 2L), ncol = 2, dimnames = list(`TNM stage` = c("I", "II", "III","IV"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
age <- as.table(matrix(c(40L, 38L, 14L, 18L), ncol = 2, dimnames = list( `Age, years`= c(">=60", "<60"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
ts <- as.table(matrix(c(45L, 33L, 17L, 15L), ncol = 2, dimnames = list(`Tumor size, mm` = c(">=50", "<50"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
tl <- as.table(matrix(c(20L, 28L, 30L, 6L, 10L, 16L), ncol = 2, dimnames = list(`Tumor location` = c("Fundus", "Body", "Antrum"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
di <- as.table(matrix(c(32L, 46L, 12L, 20L), ncol = 2, dimnames = list( Differentiation = c("Well or moderate", "Poor"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
li <- as.table(matrix(c(14L, 64L, 12L, 20L), ncol = 2, dimnames = list( `Local invasion`= c("T1-T2", "T3-T4"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
nm <- as.table(matrix(c(58L, 20L, 23L, 9L), ncol = 2, dimnames = list(`Node metastasis` = c("Yes", "No"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
dm <- as.table(matrix(c(22L, 56L, 2L, 30L), ncol = 2, dimnames = list(`Distant metastasis` = c("Yes", "No"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
ts <- as.table(matrix(c(7L, 13L, 36L,22L, 6L, 9L, 15L, 2L), ncol = 2, dimnames = list(`TNM stage` = c("I", "II", "III","IV"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.) %>%
countsToCases(.)
age$HS6ST2.expression == sex$HS6ST2.expression
identical(age[,"HS6ST2.expression"], sex[,"HS6ST2.expression"])
ts
sex[,2]
sex[,2] == ts[,2]
c1 <- c(1,1,1,0.25,0,1,1,1,0,1)
c2 <- c(0,0,1,1,0,1,0,1,0.5,1)
c3 <- c(0,1,1,1,0,0.75,1,1,0.5,0)
x <- data.frame(c1,c2,c3)
x
k <- as.matrix(expand.grid(1:ncol(x),1:ncol(x)))
k
a1 <- as.data.frame(matrix(sapply(1:nrow(k), function(n)
agree(x[,k[n,]])$value), nrow=ncol(x)))
a1 <- as.data.frame(matrix(sapply(1:nrow(k), function(n) agree(x[,k[n,]])$value), nrow=ncol(x)))
1:nrow(k)
k <- as.matrix(expand.grid(1:ncol(x),1:ncol(x)))
sapply(1:nrow(k), function(n){
any(identical(x[,k[n,1]], x[,k[n,2]]]))
})
sapply(1:nrow(k), function(n){
any(identical(x[,k[n,1]], x[,k[n,2]]]))})
sapply(1:nrow(k), function(n){
all(identical(x[,k[n,1]], x[,k[n,2]]]))})
all(identical(x[,k[n,1]], x[,k[n,2]]
))
k <- as.data.frame(expand.grid(1:ncol(x),1:ncol(x)))
sapply(1:nrow(k), function(n){
all(identical(x[,k[n,1]], x[,k[n,2]]
))
})
sex[,"HS6ST2 expression"]
sex[,"HS6ST2.expression"]
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative"))))
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.tibble()
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble()
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.,check.names = FALSE) %>%
countsToCases(.)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.,make.names = FALSE) %>%
countsToCases(.)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.,make.names = NA)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.data.frame(.,make.names = FALSE)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative"))))
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(validate = FALSE)
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.tibble(validate = FALSE)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.tibble(validate = FALSE)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as.tbl()
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
tbl_df()
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble()
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(check.names=FALSE)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(make.names = FALSE)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(make.names = -options)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative"))))
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(validate = FALSE)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative"))))
as_tibble
UseMethod("as_tibble")
getAnywhere(as_tibble)
getAnywhere(tibble::as_tibble)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq")
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq", make.names = FALSE)
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq", make.names = FALSE, validate = FALSE)
as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2, dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq", make.names = FALSE, validate = FALSE)
## biostring for mapping
x <- c("TxDb.Hsapiens.UCSC.hg19.knownGene", "BSgenome.Hsapiens.UCSC.hg19", "Homo.sapiens",
"hgu133plus2.db", "hgu133plus2probe", "hgu133plus2cdf",
"biomaRt","Biostrings", "magrittr", "ggbio","biovizBase") ## AnnotationHub
lapply(x, function(n){suppressMessages(library(n, character.only = TRUE))})
source("https://bioconductor.org/biocLite.R")
biocLite("EnsDb.Hsapiens.v86")
## biostring for mapping
x <- c("TxDb.Hsapiens.UCSC.hg19.knownGene", "BSgenome.Hsapiens.UCSC.hg19", "EnsDb.Hsapiens.v86",
"Homo.sapiens",
"hgu133plus2.db", "hgu133plus2probe", "hgu133plus2cdf",
"biomaRt","Biostrings", "magrittr", "ggbio","biovizBase") ## AnnotationHub
lapply(x, function(n){suppressMessages(library(n, character.only = TRUE))})
colnames(EnsDb.Hsapiens.v86)
colname(EnsDb.Hsapiens.v86)
colname(edb)
colnames(edb)
edb <- EnsDb.Hsapiens.v86
colnames(edb)
edb
source("https://bioconductor.org/biocLite.R")
biocLite("EnsDb.Hsapiens.v75")
## biostring for mapping
x <- c("TxDb.Hsapiens.UCSC.hg19.knownGene", "BSgenome.Hsapiens.UCSC.hg19", "EnsDb.Hsapiens.v75",
"Homo.sapiens",
"hgu133plus2.db", "hgu133plus2probe", "hgu133plus2cdf",
"biomaRt","Biostrings", "magrittr", "ggbio","biovizBase") ## AnnotationHub
lapply(x, function(n){suppressMessages(library(n, character.only = TRUE))})
edb <- EnsDb.Hsapiens.v75
colnames(edb)
edb
columns(edb)
## testing probe ID
select(hgu133plus2.db, keys = "MGAT4A", columns=c("PROBEID"), keytype="SYMBOL")
as.data.frame(hgu133plus2probe[1:3,])
str(hgu133plus2probe)
## testing probe ID
g2p <- select(hgu133plus2.db, keys = "MGAT4A", columns=c("PROBEID"), keytype="SYMBOL")
g2p
colnames(hgu133plus2probe)
## testing probe ID
g2p <- select(hgu133plus2.db, keys = "MGAT4A", columns=c("PROBEID"), keytype="SYMBOL")
dplyr::left_join(g2p, hgu133plus2probe, by = c("PROBEID" = "Probe.Set.Name"))
dplyr::left_join(g2p, hgu133plus2probe[, c("sequence", "Target.Strandedness")], by = c("PROBEID" = "Probe.Set.Name"))
dplyr::left_join(g2p, hgu133plus2probe[, c("Probe.Set.Name", "sequence", "Target.Strandedness")], by = c("PROBEID" = "Probe.Set.Name"))
columns(hgu133plus2.db)
keys(hgu133plus2.db)
11/60
library(tidyverse)
help("library")
library(tidyverse, warn.conflicts = FALSE)
countsToCases <- function(x, countcol = "Freq") {
# Get the row indices to pull from x
idx <- rep.int(seq_len(nrow(x)), x[[countcol]])
# Drop count column
x[[countcol]] <- NULL
# Get the rows from x
x[idx, ]
}
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2,
dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq", make.names = FALSE, validate = FALSE)
sex
as.data.frame(.,make.names = FALSE) %>%
countsToCases(.)
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2,
dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq")
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2,
dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
as.data.frame(.) %>%
countsToCases(.)
sex
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2,
dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
sex
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2,
dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
# as_tibble(n = "Freq") %>%
as.data.frame(.) %>%
countsToCases(.)
sex
nrow(sex)
age <- as.table(matrix(c(40L, 38L, 14L, 18L), ncol = 2, dimnames = list( `Age, years`= c(">=60", "<60"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
age
sex <- as.table(matrix(c(56L, 22L, 24L, 8L), ncol = 2,
dimnames = list(Sex = c("Male", "Female"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
age <- as.table(matrix(c(40L, 38L, 14L, 18L), ncol = 2, dimnames = list( `Age, years`= c(">=60", "<60"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
ts <- as.table(matrix(c(45L, 33L, 17L, 15L), ncol = 2, dimnames = list(`Tumor size, mm` = c(">=50", "<50"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
tl <- as.table(matrix(c(20L, 28L, 30L, 6L, 10L, 16L), ncol = 2, dimnames = list(`Tumor location` = c("Fundus", "Body", "Antrum"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
di <- as.table(matrix(c(32L, 46L, 12L, 20L), ncol = 2, dimnames = list( Differentiation = c("Well or moderate", "Poor"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
li <- as.table(matrix(c(14L, 64L, 12L, 20L), ncol = 2, dimnames = list( `Local invasion`= c("T1-T2", "T3-T4"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
nm <- as.table(matrix(c(58L, 20L, 23L, 9L), ncol = 2, dimnames = list(`Node metastasis` = c("Yes", "No"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
dm <- as.table(matrix(c(22L, 56L, 2L, 30L), ncol = 2, dimnames = list(`Distant metastasis` = c("Yes", "No"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
ts <- as.table(matrix(c(7L, 13L, 36L,22L, 6L, 9L, 15L, 2L), ncol = 2, dimnames = list(`TNM stage` = c("I", "II", "III","IV"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
ts
cbind(sex[,"HS6ST2.expression"])
k <- as.data.frame(expand.grid(1:ncol(x),1:ncol(x)))
a1 <- as.data.frame(matrix(sapply(1:nrow(k), function(n) agree(x[,k[n,]])$value), nrow=ncol(x)))
sex
cbind(sex[,"HS6ST2.expression"],
age[,"HS6ST2.expression"],
ts[,"HS6ST2.expression"],
tl[,"HS6ST2.expression"],
di[,"HS6ST2.expression"],
li[,"HS6ST2.expression"],
nm[,"HS6ST2.expression"],
dm[,"HS6ST2.expression"],
ts[,"HS6ST2.expression"])
x <- cbind(sex[,"HS6ST2.expression"],
age[,"HS6ST2.expression"],
ts[,"HS6ST2.expression"],
tl[,"HS6ST2.expression"],
di[,"HS6ST2.expression"],
li[,"HS6ST2.expression"],
nm[,"HS6ST2.expression"],
dm[,"HS6ST2.expression"],
ts[,"HS6ST2.expression"])
k <- as.data.frame(expand.grid(1:ncol(x),1:ncol(x)))
sapply(1:nrow(k), function(n){
all(identical(x[,k[n,1]], x[,k[n,2]]
))
})
a1 <- as.data.frame(matrix(sapply(1:nrow(k), function(n) agree(x[,k[n,]])$value), nrow=ncol(x)))
sapply(1:nrow(k), function(n){
all(identical(x[,k[n,1]], x[,k[n,2]]
))
})
all(sapply(1:nrow(k), function(n){
all(identical(x[,k[n,1]], x[,k[n,2]]
))}))
sex
cbind(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts)
df <- bind_cols(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts);
head(df)
age
us
ts
ts <- as.table(matrix(c(45L, 33L, 17L, 15L), ncol = 2, dimnames = list(`Tumor size, mm` = c(">=50", "<50"), `HS6ST2 expression` = c("Positive", "Negative")))) %>%
as_tibble(n = "Freq") %>%
countsToCases(.)
ts
colnames(df) <- c("Sex", `Age, years`, `Tumor size, mm`, `Tumor location`, Differentiation, `Local invasion`, `Node metastasis`, `Distant metastasis`, `TNM stage`)
colnames(df) <- c("Sex", "Age, years", `Tumor size, mm`, `Tumor location`, Differentiation, `Local invasion`, `Node metastasis`, `Distant metastasis`, `TNM stage`)
colnames(df) <- c("Sex", "Age, years", "Tumor size, mm", "Tumor location", "Differentiation", "Local invasion", "Node metastasis", "Distant metastasis", "TNM stage")
df
head(df)
df[,nrow(df)]
df[,ncol(df)]
colnames(df) <- c("Sex", "Age, years", "Tumor size, mm", "Tumor location", "Differentiation", "Local invasion", "Node metastasis", "Distant metastasis", "TNM stage", "HS6ST2 expression")
df[,ncol(df)]
mk_ftbl <- function(tbl, cs){
## about using one decimal place through presenting
specify_decimal <- function(x, k = 1) {
if (is.nan(x)) {
trimws(format(round(0, k), nsmall=k))
} else {
trimws(format(round(x, k), nsmall=k))}
}
## cs: stain_cutoff
##################loop#################################################
l <- list()
for (ind_ncol in 1:ncol(tbl)) {
## ind: indicator;
ind <- tbl[[ind_ncol]]
ind_name <- names(tbl[,ind_ncol])
if (length(levels(ind)) == 2){
pval <- fisher.test(cs, as.factor(ind))$p.value
} else if (length(levels(ind)) > 2){
pval <- Kendall(cs, ind)$sl
}
pval <- specify_decimal(pval, 3)
## contingency table
a <- table(ind, cs, useNA = "always")
rownames(a)[nrow(a)] <- "Unavailable"
a <- a[,-ncol(a)]
rn <- rownames(a)
a <- as.tibble(as.data.frame.matrix(a)) %>%
rownames_to_column(., var = "rn")
a$rn <- rn
## construct row percentage
perc_tbl <- t(apply(a,1, function(r){
new_row <- c()
a <- as.numeric(r[2])
b <- as.numeric(r[3])
new_row[1] <- paste0(r[1], " (n=", a+b, ")")
new_row[2] <- paste0(a, " (", specify_decimal(a/(a+b)*100), ")")
new_row[3] <- paste0(b, " (", specify_decimal(b/(a+b)*100), ")")
return(new_row)
}))%>% as.data.frame.matrix(., stringsAsFactors = F) %>%
as.tibble()
## paste ind_name and pval to perc_tbl
perc_tbl[,ncol(perc_tbl)+1] <- as.character(NA)
perc_tbl[nrow(perc_tbl)+1,] <- as.character(NA)
perc_tbl <- perc_tbl[c(nrow(perc_tbl), 1:(nrow(perc_tbl)-1)),]
perc_tbl[1, c(1,4)] <- c(ind_name, pval)
l[[ind_ncol]] <- perc_tbl
}
ftab <- do.call(rbind,l)
colnames(ftab) <- c("Clinicopathological parameter", levels(cs), "P-value")
ftab[is.na(ftab)] <- ""
return(ftab)
}
mk_ftbl(tbl = df[, -ncol(df)], cs =  df[,ncol(df)])
df[,ncol(df)]
mk_ftbl(tbl = df[, -ncol(df)], cs =  df[,ncol(df)])
mk_ftbl(tbl = df[, -ncol(df)], cs =  df[,ncol(df)])
help(trimws)
mk_ftbl(tbl = df[, -ncol(df)], cs =  unlist(df[,ncol(df)]))
unlist(df[,ncol(df)])
unname(unlist(df[,ncol(df)]))
mk_ftbl <- function(tbl, cs){
## about using one decimal place through presenting
specify_decimal <- function(x, k = 1) {
if (is.nan(x)) {
trimws(format(round(0, k), nsmall=k))
} else {
trimws(format(round(x, k), nsmall=k))}
}
## cs: stain_cutoff
##################loop#################################################
l <- list()
for (ind_ncol in 1:ncol(tbl)) {
## ind: indicator;
ind <- tbl[[ind_ncol]]
ind_name <- names(tbl[,ind_ncol])
if (length(levels(ind)) == 2){
pval <- fisher.test(cs, as.factor(ind))$p.value
} else if (length(levels(ind)) > 2){
pval <- Kendall(cs, ind)$sl
}
pval <- specify_decimal(pval, 3)
## contingency table
a <- table(ind, cs, useNA = "always")
rownames(a)[nrow(a)] <- "Unavailable"
a <- a[,-ncol(a)]
rn <- rownames(a)
a <- as.tibble(as.data.frame.matrix(a)) %>%
rownames_to_column(., var = "rn")
a$rn <- rn
## construct row percentage
perc_tbl <- t(apply(a,1, function(r){
new_row <- c()
a <- as.numeric(r[2])
b <- as.numeric(r[3])
new_row[1] <- paste0(r[1], " (n=", a+b, ")")
new_row[2] <- paste0(a, " (", specify_decimal(a/(a+b)*100), ")")
new_row[3] <- paste0(b, " (", specify_decimal(b/(a+b)*100), ")")
return(new_row)
}))%>% as.data.frame.matrix(., stringsAsFactors = F) %>%
as.tibble()
## paste ind_name and pval to perc_tbl
perc_tbl[,ncol(perc_tbl)+1] <- as.character(NA)
perc_tbl[nrow(perc_tbl)+1,] <- as.character(NA)
perc_tbl <- perc_tbl[c(nrow(perc_tbl), 1:(nrow(perc_tbl)-1)),]
perc_tbl[1, c(1,4)] <- c(ind_name, pval)
l[[ind_ncol]] <- perc_tbl
}
ftab <- do.call(rbind,l)
colnames(ftab) <- c("Clinicopathological parameter", levels(cs), "P-value")
ftab[is.na(ftab)] <- ""
return(ftab)
}
mk_ftbl(tbl = df[, -ncol(df)], cs =  unname(unlist(df[,ncol(df)])))
mk_ftbl <- function(tbl, cs){
## about using one decimal place through presenting
specify_decimal <- function(x, k = 1) {
if (is.nan(x)) {
trimws(format(round(0, k), nsmall=k))
} else {
trimws(format(round(x, k), nsmall=k))}
}
## cs: stain_cutoff
##################loop#################################################
l <- list()
for (ind_ncol in 1:ncol(tbl)) {
## ind: indicator;
ind <- tbl[[ind_ncol]]
ind_name <- names(tbl[,ind_ncol])
if (length(levels(ind)) == 2){
pval <- fisher.test(cs, as.factor(ind))$p.value
} else if (length(levels(ind)) > 2){
pval <- Kendall(cs, ind)$sl
}
pval <- specify_decimal(0.1, 3)
## contingency table
a <- table(ind, cs, useNA = "always")
rownames(a)[nrow(a)] <- "Unavailable"
a <- a[,-ncol(a)]
rn <- rownames(a)
a <- as.tibble(as.data.frame.matrix(a)) %>%
rownames_to_column(., var = "rn")
a$rn <- rn
## construct row percentage
perc_tbl <- t(apply(a,1, function(r){
new_row <- c()
a <- as.numeric(r[2])
b <- as.numeric(r[3])
new_row[1] <- paste0(r[1], " (n=", a+b, ")")
new_row[2] <- paste0(a, " (", specify_decimal(a/(a+b)*100), ")")
new_row[3] <- paste0(b, " (", specify_decimal(b/(a+b)*100), ")")
return(new_row)
}))%>% as.data.frame.matrix(., stringsAsFactors = F) %>%
as.tibble()
## paste ind_name and pval to perc_tbl
perc_tbl[,ncol(perc_tbl)+1] <- as.character(NA)
perc_tbl[nrow(perc_tbl)+1,] <- as.character(NA)
perc_tbl <- perc_tbl[c(nrow(perc_tbl), 1:(nrow(perc_tbl)-1)),]
perc_tbl[1, c(1,4)] <- c(ind_name, pval)
l[[ind_ncol]] <- perc_tbl
}
ftab <- do.call(rbind,l)
colnames(ftab) <- c("Clinicopathological parameter", levels(cs), "P-value")
ftab[is.na(ftab)] <- ""
return(ftab)
}
mk_ftbl(tbl = df[, -ncol(df)], cs =  unname(unlist(df[,ncol(df)])))
df
df <- bind_cols(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts)
df
df <- bind_cols(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts) %>%
mutate_at(.vars = sex, funs(factor(., levels = c("Male", Female))))
df <- bind_cols(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts) %>%
mutate_at(.vars = Sex, funs(factor(., levels = c("Male", Female))))
df <- bind_cols(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts) %>%
mutate_at(.vars = c(Sex), funs(factor(., levels = c("Male", Female))))
df <- bind_cols(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", Female))))
df <- bind_cols(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", "Female"))))
df
df <- bind_cols(sex[,1], age[,1], ts[,1], tl[,1], di[,1], li[,1], nm[,1], dm[,1], ts) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", "Female")))) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", "Female")))) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", "Female")))) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", "Female")))) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", "Female")))) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", "Female")))) %>%
mutate_at(.vars = c("Sex"), funs(factor(., levels = c("Male", "Female")))) %>%
colnames(df) <- c("Sex", "Age, years", "Tumor size, mm", "Tumor location", "Differentiation", "Local invasion", "Node metastasis", "Distant metastasis", "TNM stage", "HS6ST2 expression")
df
colnames(df)
