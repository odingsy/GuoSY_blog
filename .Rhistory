geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width*2) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2,
manual=TRUE) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/2
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=bar_width*2) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
X11()
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/2
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=(bar_width*2)) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/4
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=(bar_width*2)) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
dat <- data.frame(Group = c("S1", "S1", "S2", "S2"),
Sub   = c("A", "B", "A", "B"),
Value = c(3,5,7,8))
y_max = 10
bar_width = 0.4/4
annotation_df <- data.frame(start = c(rep(1,5), 2)+c(-bar_width,-bar_width,-bar_width,bar_width,bar_width,-bar_width),
end = c(1, rep(2,5))+c(bar_width,-bar_width,bar_width,-bar_width,bar_width,bar_width),
y = seq(0.8, 0.93, length.out = 6)*y_max,
label = 1:6)
## intergroup comparison is +/- bar_width
ggplot(dat, aes(Group, Value)) +
geom_bar(aes(fill = Sub), stat="identity", position="dodge", width=(bar_width*4)) +
geom_signif(xmin=annotation_df$start,
xmax=annotation_df$end,
annotations=annotation_df$label,
y_position=annotation_df$y,
textsize = 3,
vjust = -0.2) +
scale_fill_manual(values = c("grey80", "grey20"))+
scale_y_continuous(limits = c(0, y_max), expand = c(0,0))
blogdown:::serve_site()
getwd()
getwd()
setwd(paste0(getwd(), "/content/package"))
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth")
x <- lapply(x, require, character.only = TRUE)
source("../../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
test <- FFF_sleuth_fit(test, ~condition, 'full')
setwd(paste0(getwd(), "/content/package"))
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth")
x <- lapply(x, require, character.only = TRUE)
source("../../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
test <- FFF_sleuth_fit(test, ~condition, 'full')
test <- RRR_sleuth_fit(test, ~1, 'reduced')
test <- LLL_sleuth_lrt(test, 'reduced', 'full')
getwd()
setwd(paste0(getwd(), "/content/package"))
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth")
x <- lapply(x, require, character.only = TRUE)
source("../../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
test <- FFF_sleuth_fit(test, ~condition, 'full')
test <- RRR_sleuth_fit(test, ~1, 'reduced')
test <- LLL_sleuth_lrt(test, 'reduced', 'full')
sleuth:::sliding_window_grouping
sleuth:::shrink_df
sleuth:::me_model_by_row
me_model(
me_model
sleuth:::me_model
sleuth:::spread_abundance_by
sleuth:::check_target_mapping
sleuth:::adf
sleuth:::spread_abundance_by
norm_fun_counts
sleuth::norm_fun_counts
sleuth:::norm_fun_counts
sleuth:::adf
sleuth:::as_df
obj <<- test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
str(obj)
str(obj$bs_summary)
X
sleuth:::me_model_by_row
sleuth:::me_model
str(obj$bs_summary)
deparse(substitute(RRR_shrink_mutate))
substitute(RRR_shrink_mutate)
substitute(RRR_swg)
str(substitute(RRR_swg))
x <- sin(90)
deparse(substitute(x))
FFF_A
FFF_swg
sleuth:::shrink_df
sleuth:::sliding_window_grouping
FFF_mes_df
head(FFF_mes_df)
str(FFF_swg)
head(FFF_swg)
head(FFF_mes_df)
head(FFF_swg)
sleuth:::sliding_window_grouping
sleuth:::shrink_df
head(FFF_shrink1)
head(FFF_shrink_select)
head(FFF_shrink_mutate)
sleuth:::covar_beta
FFF_A
blogdown:::serve_site()
length(obj)
length(obj)
obj
obj
obj$bs_summary
str(obj$bs_summary)
str(obj)
x <- c("tidyverse","sleuth", "kable")
x <- lapply(x, require, character.only = TRUE)
x <- c("tidyverse","sleuth", "kableExtra")
str(obj$bs_summary)
summary.default(str(obj$bs_summary))
summary.default(str(obj))
summary(str(obj))
str(obj$bs_summary)
options(knitr.table.format = "html", kableExtra.auto_format = TRUE)
options(knitr.table.format = "html", kableExtra.auto_format = TRUE)
library("pander", lib.loc="~/Library/R/3.5/library")
head(FFF_mes_df) %>%
kable() %>%
kable_styling()
head(FFF_mes_df) %>%
kable(.) %>%
kable_styling()
head(FFF_mes_df) %>%
kableExtra::kable(.) %>%
kable_styling()
head(FFF_mes_df) %>%
kableExtra::kable(.) %>%
kableExtra::kable_styling()
x <- c("tidyverse","sleuth", "kableExtra")
x <- c("tidyverse","sleuth", "kableExtra")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
opts_chunk$set
library(knitr)
output <- opts_knit$get("rmarkdown.pandoc.to")
if (output=="html") opts_chunk$set(echo=TRUE,, message=FALSE, warning=FALSE)
if (output=="html") opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
x <- c("tidyverse", "TxDb.Hsapiens.UCSC.hg19.knownGene", "EnsDb.Hsapiens.v75", "Homo.sapiens", "org.Hs.eg.db", "hgu133plus2.db", "GO.db", "kableExtra") ## AnnotationHub
y <- lapply(x, function(n){suppressMessages(library(n, character.only = TRUE))})
# extracting the keytypes (input type) and colums (output types) of all databases
txdb_k = keytypes(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb_c = columns(TxDb.Hsapiens.UCSC.hg19.knownGene)
ensdb_k = keytypes(EnsDb.Hsapiens.v75)
ensdb_c = columns(EnsDb.Hsapiens.v75)
hs_k = keytypes(Homo.sapiens)
hs_c = columns(Homo.sapiens)
orgdb_k = keytypes(org.Hs.eg.db)
orgdb_c = columns(org.Hs.eg.db)
probe_k = keytypes(hgu133plus2.db)
probe_c = columns(hgu133plus2.db)
go_k = keytypes(GO.db)
go_c = columns(GO.db)
iden <- list(txdb_k, txdb_c,
ensdb_k, ensdb_c,
hs_k, hs_c,
orgdb_k, orgdb_c,
probe_k, probe_c,
go_k, go_c)
## obtain unique keys/columns
rn <- unique(unlist(iden))
cn <- c("txdbK", "txdbC",
"ensdbK", "ensdbC",
"hsK", "hsC",
"orgdbK", "orgdbC",
"probeK", "probeC",
"goK", "goC")
## a null matrix
mat <- matrix(nrow = length(rn), ncol = length(cn),dimnames = list(rn, cn))
## fill the keytype/column to the corresponding database. assigning 1 for presence.
iden_length <- lapply(iden, function(n){
length(n)
})
iden_c <- c()
for(i in seq_along(cn)){
iden_c <- c(iden_c, rep.int(cn[i], times = iden_length[[i]]))
}
df <- data_frame(from = iden_c, identifiers = unlist(iden))
for (i in seq_along(1:nrow(df))){
mat[which(rownames(mat) == df[[i,2]]),
which(colnames(mat) == df[[i,1]])] <- 1
}
mat[which(is.na(mat),arr.ind = TRUE)] <- 0
## concatenate the first a few element of the keys from each keytypes together seperated by \vert.
kc <- vector(mode = "character", length = 0L)
conc_descri <- function(key_string, max_length = 30){
## concatinate the first a few keys as the description of key types
concat_string <- ""
for (ks in seq_along(1:length(key_string))){
ori_string <- concat_string
if (!is.na(key_string[ks])){
concat_string <- stringi::stri_paste(concat_string, key_string[ks], sep = "|")
}
if (nchar(concat_string) >= max_length) {
## concat_string <- ori_string
concat_string <- strtrim(concat_string, max_length) %>%
paste0(., "...")
break
}
}
return(concat_string)
}
for(i in 1:nrow(mat)){
row_df <- mat[i, , drop = FALSE] == 1
row_df_colnames <- colnames(row_df)[min(which(row_df)[which(row_df)%%2 == 1])]
if (!is.na(row_df_colnames) && rownames(row_df) != "ONTOLOGY" && rownames(row_df) != "PROTDOMID"){ ## these two keytypes has problems
if(row_df_colnames == "txdbK"){
k <- keys(TxDb.Hsapiens.UCSC.hg19.knownGene, keytype = rownames(row_df))
} else if (row_df_colnames == "ensdbK"){
k <- keys(EnsDb.Hsapiens.v75, keytype = rownames(row_df))
} else if (row_df_colnames == "hsK"){
k <- keys(Homo.sapiens, keytype = rownames(row_df))
} else if (row_df_colnames == "orgdbK"){
k <- keys(org.Hs.eg.db, keytype = rownames(row_df))
} else if (row_df_colnames == "probeK"){
k <- keys(hgu133plus2.db, keytype = rownames(row_df))
} else if (row_df_colnames == "goK"){
k <- keys(GO.db, keytype = rownames(row_df))
} else {
k <- ""
}
kc[i] <-  conc_descri(key_string = k)
} else {
kc[i] <- ""
}
}
mat %>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
cbind(mat, data_frame( keys = kc)) %>%
as_data_frame() %>%
rownames_to_column(var = "keytypes") %>%
dplyr::select(keytypes, keys, everything()) %>%
kable(., format = "latex", escape = F, booktabs = T, linesep = "", align = "c") %>%
kable_styling(font_size = 7, latex_options = c("hold_position"))
mat
mat %>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
})
mat %>%
as_data_frame(.,rownames = "identifier")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
})
mat %>%
as_data_frame(.,rownames = "identifier")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame( keys = kc))
mat %>%
as_data_frame(.,rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame( keys = kc)) %>%
dplyr::select(keytypes, keys, everything())
mat %>%
as_data_frame(.,rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame( keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
kable(., format = "latex", escape = F, booktabs = T, linesep = "", align = "c") %>%
kable_styling(font_size = 7, latex_options = c("hold_position"))
a <- mat %>%
as_data_frame(.,rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame( keys = kc)) %>%
dplyr::select(keytypes, keys, everything())
View(a)
a[24,]
a[24,]$keys
a[23,]$keys
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc))
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything())
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
kable(., format = "latex", escape = F, booktabs = T, linesep = "", align = "c") %>%
kable_styling(font_size = 7, latex_options = c("hold_position"))
mat %>%
as_data_frame(rownames = "keytypes")%>%
# mutate_if(is.numeric, function(n){
#   ifelse(n == 1,
#          cell_spec(n, "latex", bold = T, background = "pink"),
#          n)
#
# }) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
.[-23, ]
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
dplyr::mutate_at(vars = c("keytypes"), funs(gsub("_", "\_",.)))
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
dplyr::mutate_at(vars = c("keytypes"), funs(gsub("_", "\\\_",.)))
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
dplyr::mutate_at(vars = c("keytypes"), funs(gsub("_", "\_"))
gsub("_", "\_", kc)
gsub("_", "\\\_", kc)
kc
gsub(pattern = "_", replacement = "\_", x = kc)
gsub(pattern = "_", replacement = "\\_", x = kc)
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
dplyr::mutate_at(vars = c("keytypes"), funs(gsub("_", "\\_", .)))
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
dplyr::mutate_at(vars("keytypes"), funs(gsub("_", "\\_", .)))
gsub(pattern = "_", replacement = "\\_", x = kc)
grep(pattern = "_", x = kc)
ks_sub <- gsub(pattern = "_", replacement = "\\_", x = kc)
print(ks_sub)
cat(ks_sub)
ks_sub <- gsub(pattern = "_", replacement = "\\_", x = kc[c(23:24)])
gsub(pattern = "_", replacement = "\\_", x = kc[c(23:24)])
gsub(pattern = "_", replacement = "\\\\_", x = kc[c(23:24)])
mat %>%
as_data_frame(rownames = "keytypes")%>%
mutate_if(is.numeric, function(n){
ifelse(n == 1,
cell_spec(n, "latex", bold = T, background = "pink"),
n)
}) %>%
bind_cols(., data_frame(keys = kc)) %>%
dplyr::select(keytypes, keys, everything()) %>%
dplyr::mutate_at(vars("keytypes"), funs(gsub("_", "\\\\_", .)))
gsub(pattern = "_", replacement = "\\_", x = kc[c(23:24)])
gsub(pattern = "_", replacement = "\\\\_", x = kc[c(23:24)])
gsub(pattern = "_", replacement = "\\\\\\_", x = kc[c(23:24)])
gsub(pattern = "_", replacement = "\\\\\\\\_", x = kc[c(23:24)])
sub(pattern = "_", replacement = "\\\\\\\\_", x = kc[c(23:24)])
gsub(pattern = "_", replacement = "\\\\_", x = kc[c(23:24)])
gsub(pattern = "_", replacement = " ", x = kc[c(23:24)])
Hmisc::latexTranslate(kc[23:24])
Hmisc::latexTranslate(kc)
knit_with_parameters('~/Dropbox/GuoSY_blog/content/post/2018-06-30-bioconductor-annotation-databases-cheat-sheet.Rmd')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
c <- c(42, 36, 13)
p <- c(31, 11, 3)
sum(c,p)
c+p
help("usetime")
library(devtools)
install_github("broadinstitute/ichorCNA")
source("https://bioconductor.org/biocLite.R")
biocLite("HMMcopy")
install_github("broadinstitute/ichorCNA")
install.packages("optparse")
