## formatting total cases and percentages
perc_tbl <- t(apply(a,1, function(r){
new_row <- c()
a <- as.numeric(r[2])
b <- as.numeric(r[3])
## should percentage be concatinated with values?
if (show_row_perc){
new_row[2] <- paste0(a, " (", specify_decimal(a/(a+b)*100), ")")
new_row[3] <- paste0(b, " (", specify_decimal(b/(a+b)*100), ")")
} else {
new_row[2] <- a
new_row[3] <- b
}
## how to display total cases
if (total_cases == "seperate") {
new_row[2:length(new_row)+1] <- new_row[2:length(new_row)] # shift the vector to right by 1.
new_row[1] <- r[1]
new_row[2] <- a+b
final_colnames <<- c("Parameter", "Cases (n)", levels(subj), "P-value") # value used outside of apply should be global assigned.
} else if (total_cases == "together") {
new_row[1] <- paste0(r[1], " (n=", a+b, ")")
final_colnames <<- c("Parameter",  levels(subj), "P-value")
} else (stop("total_cases should be either \"together\" or \"seperate\""))
return(new_row)
})) %>%
as.data.frame.matrix(., stringsAsFactors = F) %>%
as.tibble()
## formatting paste ind_name and pval to perc_tbl
perc_tbl[,ncol(perc_tbl)+1] <- as.character(NA) # a slot for pval
perc_tbl[nrow(perc_tbl)+1,] <- as.character(NA) # a slot for header
perc_tbl <- perc_tbl[c(nrow(perc_tbl), 1:(nrow(perc_tbl)-1)),]
perc_tbl[1, c(1,ncol(perc_tbl))] <- c(ind_name, pval)
l[[ind_ncol]] <- perc_tbl
}
ftab <<- do.call(rbind,l)
colnames(ftab) <- final_colnames
ftab[is.na(ftab)] <- ""
## kable output format (row level indentation)
row_indent <- which(ftab[[2]] != "")
fs <- 15
if (kable_output == "latex") {
kable(ftab, format = "latex", booktabs = TRUE, linesep = "") %>%
kable_styling(font_size = fs) %>%
add_indent(row_indent)
} else if (kable_output == "html"){
html <- kable(ftab, format = "html", align = c("l", rep.int("c", length(ftab)))) %>%
kable_styling(bootstrap_options = c("striped", "hover"), position = "center", font_size = fs) %>%
add_indent(row_indent)
if (total_cases == "seperate") {
html %>% add_header_above(c(" ", " ", "HS6ST2\n expression" = 2, " "))
} else if (total_cases == "together") {
html %>% add_header_above(c(" ", "HS6ST2\n expression" = 2, " "))
} else (stop("total_cases should be either \"together\" or \"seperate\""))
} else {
stop ("Only \"latex\" and \"html\" format is considered here.")
}
}
mk_ftbl(cov = df[, -ncol(df)], subj = unname(unlist(df[,ncol(df)])),
total_cases = "seperate",
useNA = "no",
show_row_perc = FALSE,
kable_output = "html")
## about using one decimal place through presenting (https://stackoverflow.com/a/12135122)
## wrt data presentation, package "[formattable](https://github.com/renkun-ken/formattable)" should be explored
specify_decimal <- function(x, k = 1) {
if (is.nan(x)) {
trimws(format(round(0, k), nsmall=k))
} else {
trimws(format(round(x, k), nsmall=k))}
}
mk_ftbl(cov = df[, -ncol(df)], subj = unname(unlist(df[,ncol(df)])),
total_cases = "seperate",
useNA = "no",
show_row_perc = FALSE,
kable_output = "html")
unname(unlist(df[,ncol(df)]))
mk_ftbl(cov = df[, -ncol(df)], subj = unname(unlist(df[,ncol(df)])),
total_cases = "seperate",
useNA = "no",
show_row_perc = FALSE,
kable_output = "html")
cov = df[, -ncol(df)]
subj = unname(unlist(df[,ncol(df)]))
total_cases = "seperate"
useNA = "no"
show_row_perc = FALSE
kable_output = "html"
if (length(statsTest) == 1){
statsTest  <- rep.int(statsTest, length(cov))
} else if (length(statsTest) != length(cov)) {
stop("statsTest should be length one or same length as `cov`")
}
statsTest = rep.int("chisq", length(cov))
if (length(statsTest) == 1){
statsTest  <- rep.int(statsTest, length(cov))
} else if (length(statsTest) != length(cov)) {
stop("statsTest should be length one or same length as `cov`")
}
l <- list()
for (ind_ncol in 1:ncol(cov)) {
## extract the current parameters
ind <- cov[[ind_ncol]]
ind_name <- names(cov[,ind_ncol])
## perform stat test
if (statsTest[ind_ncol] == "chisq"){
pval <- chisq.test(subj, as.factor(ind), correct = FALSE)$p.value # no continuity correction.
} else if (statsTest == "fisher"){
pval <- fisher.test(subj, as.factor(ind))$p.value
} else if (statsTest == "kendall"){
pval <- Kendall::Kendall(subj, ind)$sl
} else {stop("statsTest is not an instance within the current scope. You can add your own test.")}
pval <- specify_decimal(pval, 3)
## construct contingency table
a <- table(ind, subj, useNA = useNA)
if (useNA == "always"){
## in useNA == "always", change the last row to "unavailable", get rid of last column since subject should be cleaned with no NAs.
rownames(a)[nrow(a)] <- "Unavailable"
a <- a[,-ncol(a)]
rn <- rownames(a)
} else if (useNA == "no") {
rn <- rownames(a)
} else {
stop("useNA can only be \"always\" or \"no\".")
}
a <- as.tibble(as.data.frame.matrix(a)) %>%
rownames_to_column(., var = "rn")
a$rn <- rn
## formatting total cases and percentages
perc_tbl <- t(apply(a,1, function(r){
new_row <- c()
a <- as.numeric(r[2])
b <- as.numeric(r[3])
## should percentage be concatinated with values?
if (show_row_perc){
new_row[2] <- paste0(a, " (", specify_decimal(a/(a+b)*100), ")")
new_row[3] <- paste0(b, " (", specify_decimal(b/(a+b)*100), ")")
} else {
new_row[2] <- a
new_row[3] <- b
}
## how to display total cases
if (total_cases == "seperate") {
new_row[2:length(new_row)+1] <- new_row[2:length(new_row)] # shift the vector to right by 1.
new_row[1] <- r[1]
new_row[2] <- a+b
final_colnames <<- c("Parameter", "Cases (n)", levels(subj), "P-value") # value used outside of apply should be global assigned.
} else if (total_cases == "together") {
new_row[1] <- paste0(r[1], " (n=", a+b, ")")
final_colnames <<- c("Parameter",  levels(subj), "P-value")
} else (stop("total_cases should be either \"together\" or \"seperate\""))
return(new_row)
})) %>%
as.data.frame.matrix(., stringsAsFactors = F) %>%
as.tibble()
## formatting paste ind_name and pval to perc_tbl
perc_tbl[,ncol(perc_tbl)+1] <- as.character(NA) # a slot for pval
perc_tbl[nrow(perc_tbl)+1,] <- as.character(NA) # a slot for header
perc_tbl <- perc_tbl[c(nrow(perc_tbl), 1:(nrow(perc_tbl)-1)),]
perc_tbl[1, c(1,ncol(perc_tbl))] <- c(ind_name, pval)
l[[ind_ncol]] <- perc_tbl
}
1:ncol(cov)
ind_ncol <- 5
## extract the current parameters
ind <- cov[[ind_ncol]]
ind_name <- names(cov[,ind_ncol])
## perform stat test
if (statsTest[ind_ncol] == "chisq"){
pval <- chisq.test(subj, as.factor(ind), correct = FALSE)$p.value # no continuity correction.
} else if (statsTest == "fisher"){
pval <- fisher.test(subj, as.factor(ind))$p.value
} else if (statsTest == "kendall"){
pval <- Kendall::Kendall(subj, ind)$sl
} else {stop("statsTest is not an instance within the current scope. You can add your own test.")}
pval <- specify_decimal(pval, 3)
## construct contingency table
a <- table(ind, subj, useNA = useNA)
if (useNA == "always"){
## in useNA == "always", change the last row to "unavailable", get rid of last column since subject should be cleaned with no NAs.
rownames(a)[nrow(a)] <- "Unavailable"
a <- a[,-ncol(a)]
rn <- rownames(a)
} else if (useNA == "no") {
rn <- rownames(a)
} else {
stop("useNA can only be \"always\" or \"no\".")
}
a <- as.tibble(as.data.frame.matrix(a)) %>%
rownames_to_column(., var = "rn")
a$rn <- rn
## formatting total cases and percentages
perc_tbl <- t(apply(a,1, function(r){
new_row <- c()
a <- as.numeric(r[2])
b <- as.numeric(r[3])
## should percentage be concatinated with values?
if (show_row_perc){
new_row[2] <- paste0(a, " (", specify_decimal(a/(a+b)*100), ")")
new_row[3] <- paste0(b, " (", specify_decimal(b/(a+b)*100), ")")
} else {
new_row[2] <- a
new_row[3] <- b
}
## how to display total cases
if (total_cases == "seperate") {
new_row[2:length(new_row)+1] <- new_row[2:length(new_row)] # shift the vector to right by 1.
new_row[1] <- r[1]
new_row[2] <- a+b
final_colnames <<- c("Parameter", "Cases (n)", levels(subj), "P-value") # value used outside of apply should be global assigned.
} else if (total_cases == "together") {
new_row[1] <- paste0(r[1], " (n=", a+b, ")")
final_colnames <<- c("Parameter",  levels(subj), "P-value")
} else (stop("total_cases should be either \"together\" or \"seperate\""))
return(new_row)
})) %>%
as.data.frame.matrix(., stringsAsFactors = F) %>%
as.tibble()
## formatting paste ind_name and pval to perc_tbl
perc_tbl[,ncol(perc_tbl)+1] <- as.character(NA) # a slot for pval
perc_tbl[nrow(perc_tbl)+1,] <- as.character(NA) # a slot for header
perc_tbl <- perc_tbl[c(nrow(perc_tbl), 1:(nrow(perc_tbl)-1)),]
perc_tbl[1, c(1,ncol(perc_tbl))] <- c(ind_name, pval)
perc_tbl
c(1,ncol(perc_tbl))
perc_tbl[1, c(1,ncol(perc_tbl))]
c(ind_name, pval)
perc_tbl[1, c(1,ncol(perc_tbl))]
perc_tbl[1, c(ncol(perc_tbl))] <- pval
perc_tbl[1, 1] <- ind_name
l[[ind_ncol]] <- perc_tbl
l
mk_ftbl <- function(subj, cov,
statsTest = rep.int("chisq", length(cov)),
total_cases = c("seperate", "together"),
show_row_perc = c(FALSE, TRUE),
useNA = c("no", "always"),
kable_output = c("latex", "html")){
## statsTest should be length one or same length as `cov`
if (length(statsTest) == 1){
statsTest  <- rep.int(statsTest, length(cov))
} else if (length(statsTest) != length(cov)) {
stop("statsTest should be length one or same length as `cov`")
}
l <- list()
for (ind_ncol in 1:ncol(cov)) {
## extract the current parameters
ind <- cov[[ind_ncol]]
ind_name <- names(cov[,ind_ncol])
## perform stat test
if (statsTest[ind_ncol] == "chisq"){
pval <- chisq.test(subj, as.factor(ind), correct = FALSE)$p.value # no continuity correction.
} else if (statsTest == "fisher"){
pval <- fisher.test(subj, as.factor(ind))$p.value
} else if (statsTest == "kendall"){
pval <- Kendall::Kendall(subj, ind)$sl
} else {stop("statsTest is not an instance within the current scope. You can add your own test.")}
pval <- specify_decimal(pval, 3)
## construct contingency table
a <- table(ind, subj, useNA = useNA)
if (useNA == "always"){
## in useNA == "always", change the last row to "unavailable", get rid of last column since subject should be cleaned with no NAs.
rownames(a)[nrow(a)] <- "Unavailable"
a <- a[,-ncol(a)]
rn <- rownames(a)
} else if (useNA == "no") {
rn <- rownames(a)
} else {
stop("useNA can only be \"always\" or \"no\".")
}
a <- as.tibble(as.data.frame.matrix(a)) %>%
rownames_to_column(., var = "rn")
a$rn <- rn
## formatting total cases and percentages
perc_tbl <- t(apply(a,1, function(r){
new_row <- c()
a <- as.numeric(r[2])
b <- as.numeric(r[3])
## should percentage be concatinated with values?
if (show_row_perc){
new_row[2] <- paste0(a, " (", specify_decimal(a/(a+b)*100), ")")
new_row[3] <- paste0(b, " (", specify_decimal(b/(a+b)*100), ")")
} else {
new_row[2] <- a
new_row[3] <- b
}
## how to display total cases
if (total_cases == "seperate") {
new_row[2:length(new_row)+1] <- new_row[2:length(new_row)] # shift the vector to right by 1.
new_row[1] <- r[1]
new_row[2] <- a+b
final_colnames <<- c("Parameter", "Cases (n)", levels(subj), "P-value") # value used outside of apply should be global assigned.
} else if (total_cases == "together") {
new_row[1] <- paste0(r[1], " (n=", a+b, ")")
final_colnames <<- c("Parameter",  levels(subj), "P-value")
} else (stop("total_cases should be either \"together\" or \"seperate\""))
return(new_row)
})) %>%
as.data.frame.matrix(., stringsAsFactors = F) %>%
as.tibble()
## formatting paste ind_name and pval to perc_tbl
perc_tbl[,ncol(perc_tbl)+1] <- as.character(NA) # a slot for pval
perc_tbl[nrow(perc_tbl)+1,] <- as.character(NA) # a slot for header
perc_tbl <- perc_tbl[c(nrow(perc_tbl), 1:(nrow(perc_tbl)-1)),]
perc_tbl[1, c(ncol(perc_tbl))] <- pval
perc_tbl[1, 1] <- ind_name
l[[ind_ncol]] <- perc_tbl
}
ftab <<- do.call(rbind,l)
colnames(ftab) <- final_colnames
ftab[is.na(ftab)] <- ""
## kable output format (row level indentation)
row_indent <- which(ftab[[2]] != "")
fs <- 15
if (kable_output == "latex") {
kable(ftab, format = "latex", booktabs = TRUE, linesep = "") %>%
kable_styling(font_size = fs) %>%
add_indent(row_indent)
} else if (kable_output == "html"){
html <- kable(ftab, format = "html", align = c("l", rep.int("c", length(ftab)))) %>%
kable_styling(bootstrap_options = c("striped", "hover"), position = "center", font_size = fs) %>%
add_indent(row_indent)
if (total_cases == "seperate") {
html %>% add_header_above(c(" ", " ", "HS6ST2\n expression" = 2, " "))
} else if (total_cases == "together") {
html %>% add_header_above(c(" ", "HS6ST2\n expression" = 2, " "))
} else (stop("total_cases should be either \"together\" or \"seperate\""))
} else {
stop ("Only \"latex\" and \"html\" format is considered here.")
}
}
mk_ftbl(cov = df[, -ncol(df)], subj = unname(unlist(df[,ncol(df)])),
total_cases = "seperate",
useNA = "no",
show_row_perc = FALSE,
kable_output = "html")
blogdown::build_site()
blogdown::build_site()
as_tibble
library(tidyverse)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("pachterlab/sleuth")
blogdown::build_site()
## setwd(paste0(getwd(), "/content/package")) ## needed to run this code chunk alone instead of Rmd compilation.
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth", "kableExtra")
x <- lapply(x, require, character.only = TRUE)
source("../../static/sleuth/sleuth_internal_structure.R")
## setwd(paste0(getwd(), "/content/package")) ## needed to run this code chunk alone instead of Rmd compilation.
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth", "kableExtra")
x <- lapply(x, require, character.only = TRUE)
source("../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../../static/sleuth/tbl.txt", header = T)
## setwd(paste0(getwd(), "/content/package")) ## needed to run this code chunk alone instead of Rmd compilation.
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth", "kableExtra")
x <- lapply(x, require, character.only = TRUE)
source("../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
obj <<- test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
PPP_sleuth_prep
t
## read the experiment design matrix
t <- read.table("../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
obj <<- test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
## setwd(paste0(getwd(), "/content/package")) ## needed to run this code chunk alone instead of Rmd compilation.
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
x <- c("tidyverse","sleuth", "kableExtra")
x <- lapply(x, require, character.only = TRUE)
source("../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
obj <<- test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
test <- FFF_sleuth_fit(test, ~condition, 'full')
test <- RRR_sleuth_fit(test, ~1, 'reduced')
test <- LLL_sleuth_lrt(test, 'reduced', 'full')
options(knitr.table.format = "html", kableExtra.auto_format = TRUE, kableExtra.font_size = 8)
fs <- 8
str(obj$bs_summary)
## modified from me_model and me_model_by_row
me_model_by_row <- lapply(1:nrow(bs_summary$obs_counts), function(i) {
function(X, bs_summary$obs_counts[i, ], bs_summary$sigma_q_sq[i]) {
bs_sigma_summary()
bs_sigma_summary
obj$bs_summary
1:nrow(bs_summary$obs_counts)
head(FFF_mes_df) %>%
kable(.) %>%
kable_styling(font_size = fs)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
## setwd(paste0(getwd(), "/content/package")) ## needed to run this code chunk alone instead of Rmd compilation.
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
library(tidyverse)
library(sleuth)
library(kableExtra)
source("../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
obj <<- test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
## setwd(paste0(getwd(), "/content/package")) ## needed to run this code chunk alone instead of Rmd compilation.
if (packageVersion("sleuth") != "0.29.0"){
devtools::install_github("pachterlab/sleuth@v0.29.0")
}
library(tidyverse)
library(sleuth)
library(kableExtra)
source("../static/sleuth/sleuth_internal_structure.R")
## read the experiment design matrix
t <- read.table("../static/sleuth/tbl.txt", header = T)
t$path <- as.character(t$path)
obj <<- test <- PPP_sleuth_prep(t, extra_bootstrap_summary = TRUE, num_cores = 1)
test <- FFF_sleuth_fit(test, ~condition, 'full')
test <- RRR_sleuth_fit(test, ~1, 'reduced')
test <- LLL_sleuth_lrt(test, 'reduced', 'full')
blogdown::build_site()
blogdown::build_site()
install.packages("ggsignif")
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
servr::daemon_stop(2)
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
library(blogdown)
blogdown::install_theme(theme = "xmin")
blogdown::install_theme(theme = "yihui/hugo-xmin")
serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
servr::daemon_stop(2)
servr::daemon_stop(2)
blogdown::serve_site()
servr::daemon_stop(2)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
file.edit('~/.Rprofile')
file.edit('~/.Rprofile')
?file.edit
file.edit("content/_index.markdown")
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
old.packages()
update.packages("blogdown")
ulimit -s
source("ulimit -s")
system("ulimit -s")
system("ulimit -s 16384")
system("ulimit -s")
blogdown::serve_site()
Cstack_info()
gc()
Cstack_info()
install.packages(blogdown)
install.packages("blogdown")
blogdown::install_hugo()
blogdown::build_site()
blogdown::serve_site()
blogdown::hugo_version()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
